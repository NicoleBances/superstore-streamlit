# -*- coding: utf-8 -*-
"""EF_DataVisualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16qKATqUDx0OOhfVgggaXsdvrAkd3zUIx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import kagglehub

# Download latest version
path = kagglehub.dataset_download("vivek468/superstore-dataset-final")

print("Path to dataset files:", path)

df = pd.read_csv('/kaggle/input/superstore-dataset-final/Sample - Superstore.csv', encoding='latin1')
df.head()

df.shape

df.info()

df.describe()

#Valores valores Na
sns.heatmap(df.isna(),cbar=False,cmap='viridis')

df['Row ID'].is_unique

df['Order ID'].is_unique

text_duplicate = df[df.duplicated(subset='Order ID')]
text_duplicate

"""Es correcto que tenga duplicados, ya que una orden puede contener varios productos.

# Entendimiento de datos
"""

sns.histplot(df['Sales'], bins=50, kde=True)
plt.title("Distribución de Ventas")
plt.show()

sns.histplot(df['Profit'], bins=20, kde=True, color='green')
plt.title("Distribución de Ganancias")
plt.show()

sns.histplot(df['Discount'], bins=20, kde=True, color='orange')
plt.title("Distribución de Descuentos")
plt.show()

sns.scatterplot(data=df, x='Discount', y='Profit')
plt.title("Descuento vs Ganancia")
plt.show()

df.groupby('Category')['Sales'].sum().plot(kind='bar', title='Ventas por Categoría')
plt.show()

"""# Hipótesis

## Hipótesis 1: Todos los clientes tienen comportamientos de compra semejante
"""

gasto_por_cliente = df.groupby('Customer ID')['Sales'].sum()
gasto_min = gasto_por_cliente.min()
gasto_max = gasto_por_cliente.max()

print(f"Gasto mínimo: {gasto_min:.2f}")
print(f"Gasto máximo: {gasto_max:.2f}")

gasto_segmentado = pd.qcut(gasto_por_cliente, q=4, labels=['Bajo', 'Medio-Bajo', 'Medio-Alto', 'Alto'])

# Añadir nombres
gasto_segmentado_df = pd.DataFrame({
    'Customer ID': gasto_por_cliente.index,
    'Gasto Total': gasto_por_cliente.values,
    'Segmento': gasto_segmentado
})

gasto_segmentado_df['Segmento'].value_counts()

sns.boxplot(data=gasto_segmentado_df, x='Segmento', y='Gasto Total', order=['Bajo', 'Medio-Bajo', 'Medio-Alto', 'Alto'])
plt.title("Distribución del gasto total por segmento de cliente")

frecuencia = df.groupby('Customer ID')['Order Date'].nunique().reset_index(name='Frecuencia de Compra')
df_frecuencia = df.merge(frecuencia, on='Customer ID', how='left')
plt.figure(figsize=(10, 6))
sns.boxplot(data=df_frecuencia, x='Segmento', y='Frecuencia de Compra', order=['Bajo', 'Medio-Bajo', 'Medio-Alto', 'Alto'])
plt.title("Frecuencia de compra por segmento de cliente")
plt.xlabel("Segmento de Gasto")
plt.ylabel("Número de días únicos con compras")
plt.tight_layout()
plt.show()

ticket_promedio = df.groupby('Customer ID')['Sales'].mean()

productos_por_cliente = df.groupby('Customer ID')['Quantity'].sum()

"""## Hipótesis 2: Ciertos segmentos siempre generaran más venta que otros"""

df.groupby('Segment')['Sales'].sum().plot(kind='bar', title='Ventas por segmento')

# Asegúrate de que Order Date sea datetime
df['Order Date'] = pd.to_datetime(df['Order Date'])

# Creamos columna "Year-Month"
df['YearMonth'] = df['Order Date'].dt.to_period('M')

# Agrupamos por mes y segmento
ventas_segmento = df.groupby(['YearMonth', 'Segment'])['Sales'].sum().unstack()

# Plot
ventas_segmento.plot(figsize=(12,6), marker='o')
plt.title('Tendencia mensual de ventas por segmento')
plt.xlabel('Mes')
plt.ylabel('Ventas totales')
plt.xticks(rotation=45)
plt.grid(True)
plt.legend(title='Segmento')
plt.tight_layout()
plt.show()

"""## Hipótesis 3: No existe un mes de ventas bajas"""

df['Order Date'] = pd.to_datetime(df['Order Date'])
df['YearMonth'] = df['Order Date'].dt.to_period('M')
df.groupby('YearMonth')['Sales'].sum().plot(title='Ventas mensuales totales', figsize=(10,5))

df.groupby(df['Order Date'].dt.month)['Sales'].sum().plot(kind='bar', title='Ventas totales por mes')